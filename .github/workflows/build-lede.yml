
name: Build-lede

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

  schedule:
    - cron: 0 0 1 * *

env:
  SOURCE_N: lede
  FEEDS_CONF: config/${{ env.SOURCE_N }}/feeds.conf.default
  CONFIG_FILE: config/${{ env.SOURCE_N }}/.config
  CONFIG_FILES: config/${{ env.SOURCE_N }}/files
  DIY_P1_SH: config/${{ env.SOURCE_N }}/diy-part1.sh
  DIY_P2_SH: config/${{ env.SOURCE_N }}/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "üí¨ Server information \n"
        echo -e "üíª Server running on Ubuntu: [ Release: $(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2) / Host: $(arch) ] \n"
        echo -e "üßÆ Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "üíæ Server memory usage: \n$(free -h) \n"
        echo -e "üóÉÔ∏è Server space usag: \n$(df -hT ${GITHUB_WORKSPACE}) \n"

    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli* ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y install aria2
        sudo -E wget -P /usr/local/sbin/ https://github.com/HiGarfield/lede-17.01.4-Mod/raw/master/.github/backup/apt-fast
        sudo -E chmod -R 755 /usr/local/sbin/apt-fast
        sudo -E apt-fast -y -qq install dwarves quilt llvm clang lldb lld build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev \
          patch python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib p7zip-full msmtp libssl-dev texinfo libreadline-dev \
          libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget ccache curl \
          swig coreutils vim nano python3 python3-dev python3-pip python3-ply python3-pyelftools lrzsz scons pigz gzip
        pip3 install --user -U pylibfdt
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code [ ${{ env.SOURCE_N }} ]
      working-directory: /workdir
      run: |
        # Set up compilation source code
        if [[ "${{ env.SOURCE_N }}" == *"openwrt"* ]]; then
            REPO_URL="https://github.com/openwrt/openwrt"
            REPO_BRANCH="openwrt-23.05"
        elif [[ "${{ env.SOURCE_N }}" == *"lede"* ]]; then
            REPO_URL="https://github.com/coolsnowwolf/lede"
            REPO_BRANCH="master"
        elif [[ "${{ env.SOURCE_N }}" == *"immortalwrt"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
            REPO_BRANCH="openwrt-23.05"
        else
            echo "Unknown source code repository."
            exit 1
        fi

        df -hT $PWD
        git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e $CONFIG_FILES ] && mv $CONFIG_FILES openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: immortalwrt
        prefix: ${{ github.workspace }}/openwrt

    - name: Compile the firmware
      id: compile
      continue-on-error: true
      run: |
        cd openwrt
        make -j$(($(nproc) + 1))

    - name: If error
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt && make -j1 V=s

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Prepare artifact
      run: |
        cd ./openwrt/bin
        mkdir -p ./firmware
        mkdir -p ./package
        rm -rf $(find ../bin/targets/ -name "packages" -o -name "*.buildinfo" -o -name "sha256sums" -o -name "*.manifest")
        cp -rf $(find ../bin/targets/ -type f) ./firmware/
        cp -rf $(find ../bin/packages/ -type f -name "*.ipk") ./package/
        cd ./package
        tar -zcvf IPK.tar.gz *
        mv -f IPK.tar.gz ../

    - name: Organize files
      id: organize
      run: |
        cd openwrt
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Package firmware
      uses: dawenhaozx/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/bin/targets/*/*/*.tar.gz
        openwrt_board: s905d
        kernel_repo: ophub/kernel
        openwrt_kernel: 5.15.1
        kernel_usage: stable
        auto_kernel: true

    - name: copy update files
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin
        cp IPK.tar.gz /opt/openwrt_packit/output/
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.SOURCE_N }}_N1_${{ env.build_date }}
        tag: ${{ env.SOURCE_N }}_N1_${{ env.build_date }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * Default IP: 192.168.50.3
          * Default username: root
          * Default password: password

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 9

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
         repo: ${{ github.repository }}
         keep_latest: 9
         delete_tags: true
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Telegram notification
      run: |
        MSG="
        ÁºñËØëÊó∂Èó¥Ôºö${{ env.build_date }}
        N1 ÁºñËØëÂÆåÊàê
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"
