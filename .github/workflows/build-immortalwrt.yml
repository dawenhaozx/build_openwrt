
name: Build-immortalwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      source_branch:
        description: "Select the source branch"
        required: false
        default: "immortalwrt"
        type: choice
        options:
          - openwrt
          - lede
          - immortalwrt
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.15.1_6.6.1
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1

  schedule:
    - cron: 0 0 1 * *

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/.config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "üí¨ Server information \n"
        echo -e "üíª Server running on Ubuntu: [ Release: $(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2) / Host: $(arch) ] \n"
        echo -e "üßÆ Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "üíæ Server memory usage: \n$(free -h) \n"
        echo -e "üóÉÔ∏è Server space usag: \n$(df -hT ${GITHUB_WORKSPACE}) \n"

    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli* ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y install aria2
        sudo -E wget -P /usr/local/sbin/ https://github.com/HiGarfield/lede-17.01.4-Mod/raw/master/.github/backup/apt-fast
        sudo -E chmod -R 755 /usr/local/sbin/apt-fast
        sudo -E apt-fast -y -qq install dwarves quilt llvm clang lldb lld build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev \
          patch python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib p7zip-full msmtp libssl-dev texinfo libreadline-dev \
          libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget ccache curl \
          swig coreutils vim nano python3 python3-dev python3-pip python3-ply python3-pyelftools lrzsz scons pigz gzip
        pip3 install --user -U pylibfdt
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown ${USER}:${GROUPS} /workdir
        echo "build_date=$(date +%Y.%m.%d)" >> ${GITHUB_ENV}

    - name: Clone source code [ ${{ inputs.source_branch }} ]
      working-directory: /workdir
      run: |
        # Set up compilation source code
        if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
            REPO_URL="https://github.com/openwrt/openwrt"
            REPO_BRANCH="openwrt-23.05"
        elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
            REPO_URL="https://github.com/coolsnowwolf/lede"
            REPO_BRANCH="master"
        elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
            REPO_BRANCH="openwrt-23.05"
        else
            echo "Unknown source code repository."
            exit 1
        fi

        df -hT $PWD
        git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
        ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

    - name: Load custom feeds
      run: |
        [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x ${DIY_P1_SH}
        cd openwrt
        ${GITHUB_WORKSPACE}/${DIY_P1_SH}

    - name: Update feeds
      run: cd openwrt/ && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt/ && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [[ -d "config/${{ inputs.source_branch }}/files" ]] && mv -f config/${{ inputs.source_branch }}/files openwrt/files
        [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
        chmod +x ${DIY_P2_SH}
        cd openwrt
        ${GITHUB_WORKSPACE}/${DIY_P2_SH}

    - name: Download package
      run: |
        cd openwrt/
        make defconfig
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Generate cache mixkey
      id: gen_cache_mixkey
      working-directory: /workdir
      run: |
        target_device_arch="$(sed -n 's/^CONFIG_TARGET_BOARD=\"\(.*\)\"/\1/p' openwrt/.config)"
        gcc_hash=$(gcc --version | sha256sum | awk '{print substr($1,1,8)}')
        ldd_hash=$(ldd --version | sha256sum | awk '{print substr($1,1,8)}')
        mixkey="${target_device_arch}-${gcc_hash}-${ldd_hash}"
        echo "mixkey=$mixkey" >> $GITHUB_OUTPUT

    - name: Cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ steps.gen_cache_mixkey.outputs.mixkey }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Compile the OpenWrt
      id: compile
      run: |
        cd openwrt/
        echo -e "$(nproc) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Clear server space
      id: clean
      if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
      run: |
        # Clean up server space
        cd openwrt/
        mkdir output
        cp -f bin/targets/*/*/*rootfs.tar.gz output/
        cp -f .config output/config
        # rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

        # Generate sha256sum file
        cd output/
        for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

        # Set output information
        df -hT ${PWD}
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Package firmware
      if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
      uses: dawenhaozx/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/output/*rootfs.tar.gz
        openwrt_board: s905d
        kernel_repo: ophub/kernel
        openwrt_kernel: ${{ inputs.openwrt_kernel }}
        kernel_usage: stable
        auto_kernel: true
        builder_name: WEN
        
    - name: Upload the packaged OpenWrt
      uses: ncipollo/release-action@main
      if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
      with:
        tag: ${{ inputs.source_branch }}_N1_${{ env.build_date }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        removeArtifacts: false
        replacesArtifacts: true
        token: ${{ secrets.GH_TOKEN }}
        body: |
          * Default IP: 192.168.50.3
          * Default username: root
          * Default password: password

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 9

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
         repo: ${{ github.repository }}
         keep_latest: 9
         delete_tags: true
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Telegram notification
      run: |
        MSG="
        ÁºñËØëÊó∂Èó¥Ôºö${{ env.build_date }}
        N1 ÁºñËØëÂÆåÊàê
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"
